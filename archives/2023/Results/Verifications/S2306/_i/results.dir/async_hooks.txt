                                                                                                                                                                         confidence improvement
async_hooks/async-local-storage-getstore-nested-resources.js n=10000 resourceCount=10                                                                                                    0.76 %
async_hooks/async-local-storage-getstore-nested-resources.js n=10000 resourceCount=100                                                                                            *     -3.78 %
async_hooks/async-local-storage-getstore-nested-resources.js n=10000 resourceCount=1000                                                                                                 -0.80 %
async_hooks/async-local-storage-getstore-nested-run.js n=10000 sotrageCount=1                                                                                                           -2.45 %
async_hooks/async-local-storage-getstore-nested-run.js n=10000 sotrageCount=10                                                                                                          -1.85 %
async_hooks/async-local-storage-getstore-nested-run.js n=10000 sotrageCount=100                                                                                                         -2.09 %
async_hooks/async-local-storage-propagate-asyncresource.js n=1000 storageCount=0                                                                                                        -1.11 %
async_hooks/async-local-storage-propagate-asyncresource.js n=1000 storageCount=1                                                                                                         0.71 %
async_hooks/async-local-storage-propagate-asyncresource.js n=1000 storageCount=10                                                                                                       -2.18 %
async_hooks/async-local-storage-propagate-asyncresource.js n=1000 storageCount=100                                                                                                       0.76 %
async_hooks/async-local-storage-propagate-promise.js n=100000 storageCount=0                                                                                                     **     -6.54 %
async_hooks/async-local-storage-propagate-promise.js n=100000 storageCount=1                                                                                                      *     -5.66 %
async_hooks/async-local-storage-propagate-promise.js n=100000 storageCount=10                                                                                                           -2.42 %
async_hooks/async-local-storage-propagate-promise.js n=100000 storageCount=100                                                                                                           0.05 %
async_hooks/async-local-storage-run.js n=10000000                                                                                                                                       -4.12 %
async_hooks/async-resource-vs-destroy.js n=1000000 duration=5 connections=500 path="/" asyncMethod="async" type="async-local-storage" benchmarker="test-double-http"                    -1.26 %
async_hooks/async-resource-vs-destroy.js n=1000000 duration=5 connections=500 path="/" asyncMethod="async" type="async-resource" benchmarker="test-double-http"                          0.00 %
async_hooks/async-resource-vs-destroy.js n=1000000 duration=5 connections=500 path="/" asyncMethod="async" type="destroy" benchmarker="test-double-http"                          *     -0.81 %
async_hooks/async-resource-vs-destroy.js n=1000000 duration=5 connections=500 path="/" asyncMethod="callbacks" type="async-local-storage" benchmarker="test-double-http"                -0.71 %
async_hooks/async-resource-vs-destroy.js n=1000000 duration=5 connections=500 path="/" asyncMethod="callbacks" type="async-resource" benchmarker="test-double-http"                     -1.15 %
async_hooks/async-resource-vs-destroy.js n=1000000 duration=5 connections=500 path="/" asyncMethod="callbacks" type="destroy" benchmarker="test-double-http"                             0.36 %
async_hooks/gc-tracking.js method="trackingDisabled" n=1000000                                                                                                                          -2.16 %
async_hooks/gc-tracking.js method="trackingEnabled" n=1000000                                                                                                                     *     -5.38 %
async_hooks/gc-tracking.js method="trackingEnabledWithDestroyHook" n=1000000                                                                                                            -0.91 %
async_hooks/http-server.js duration=5 connections=50 asyncHooks="after" benchmarker="test-double-http"                                                                                  -5.09 %
async_hooks/http-server.js duration=5 connections=50 asyncHooks="all" benchmarker="test-double-http"                                                                                     0.41 %
async_hooks/http-server.js duration=5 connections=50 asyncHooks="before" benchmarker="test-double-http"                                                                                  1.92 %
async_hooks/http-server.js duration=5 connections=50 asyncHooks="disabled" benchmarker="test-double-http"                                                                               -0.61 %
async_hooks/http-server.js duration=5 connections=50 asyncHooks="init" benchmarker="test-double-http"                                                                                   -2.88 %
async_hooks/http-server.js duration=5 connections=50 asyncHooks="none" benchmarker="test-double-http"                                                                                   -3.09 %
async_hooks/http-server.js duration=5 connections=500 asyncHooks="after" benchmarker="test-double-http"                                                                                  0.71 %
async_hooks/http-server.js duration=5 connections=500 asyncHooks="all" benchmarker="test-double-http"                                                                                    1.68 %
async_hooks/http-server.js duration=5 connections=500 asyncHooks="before" benchmarker="test-double-http"                                                                                -1.83 %
async_hooks/http-server.js duration=5 connections=500 asyncHooks="disabled" benchmarker="test-double-http"                                                                               4.49 %
async_hooks/http-server.js duration=5 connections=500 asyncHooks="init" benchmarker="test-double-http"                                                                                  -0.69 %
async_hooks/http-server.js duration=5 connections=500 asyncHooks="none" benchmarker="test-double-http"                                                                                   2.79 %
async_hooks/promises.js asyncHooks="disabled" n=1000000                                                                                                                                  2.06 %
async_hooks/promises.js asyncHooks="enabled" n=1000000                                                                                                                                   1.45 %
async_hooks/promises.js asyncHooks="enabledWithDestroy" n=1000000                                                                                                                        0.92 %
async_hooks/promises.js asyncHooks="enabledWithInitOnly" n=1000000                                                                                                               **     -3.96 %
                                                                                                                                                                         accuracy (*)    (**)    (***)
async_hooks/async-local-storage-getstore-nested-resources.js n=10000 resourceCount=10                                                                                          ±6.43% ±14.84%  ±47.25%
async_hooks/async-local-storage-getstore-nested-resources.js n=10000 resourceCount=100                                                                                         ±3.23%  ±7.45%  ±23.72%
async_hooks/async-local-storage-getstore-nested-resources.js n=10000 resourceCount=1000                                                                                       ±10.33% ±23.84%  ±75.90%
async_hooks/async-local-storage-getstore-nested-run.js n=10000 sotrageCount=1                                                                                                  ±3.07%  ±7.09%  ±22.56%
async_hooks/async-local-storage-getstore-nested-run.js n=10000 sotrageCount=10                                                                                                 ±5.11% ±11.80%  ±37.56%
async_hooks/async-local-storage-getstore-nested-run.js n=10000 sotrageCount=100                                                                                                ±3.65%  ±8.42%  ±26.80%
async_hooks/async-local-storage-propagate-asyncresource.js n=1000 storageCount=0                                                                                               ±6.09% ±14.04%  ±44.71%
async_hooks/async-local-storage-propagate-asyncresource.js n=1000 storageCount=1                                                                                               ±2.49%  ±5.74%  ±18.28%
async_hooks/async-local-storage-propagate-asyncresource.js n=1000 storageCount=10                                                                                              ±3.32%  ±7.65%  ±24.36%
async_hooks/async-local-storage-propagate-asyncresource.js n=1000 storageCount=100                                                                                             ±9.96% ±22.98%  ±73.15%
async_hooks/async-local-storage-propagate-promise.js n=100000 storageCount=0                                                                                                   ±2.14%  ±4.93%  ±15.69%
async_hooks/async-local-storage-propagate-promise.js n=100000 storageCount=1                                                                                                   ±3.21%  ±7.40%  ±23.55%
async_hooks/async-local-storage-propagate-promise.js n=100000 storageCount=10                                                                                                 ±22.47% ±51.83% ±165.03%
async_hooks/async-local-storage-propagate-promise.js n=100000 storageCount=100                                                                                                 ±1.86%  ±4.30%  ±13.68%
async_hooks/async-local-storage-run.js n=10000000                                                                                                                             ±14.30% ±32.98% ±105.01%
async_hooks/async-resource-vs-destroy.js n=1000000 duration=5 connections=500 path="/" asyncMethod="async" type="async-local-storage" benchmarker="test-double-http"           ±2.15%  ±4.96%  ±15.81%
async_hooks/async-resource-vs-destroy.js n=1000000 duration=5 connections=500 path="/" asyncMethod="async" type="async-resource" benchmarker="test-double-http"                ±0.67%  ±1.55%   ±4.93%
async_hooks/async-resource-vs-destroy.js n=1000000 duration=5 connections=500 path="/" asyncMethod="async" type="destroy" benchmarker="test-double-http"                       ±0.67%  ±1.54%   ±4.90%
async_hooks/async-resource-vs-destroy.js n=1000000 duration=5 connections=500 path="/" asyncMethod="callbacks" type="async-local-storage" benchmarker="test-double-http"       ±1.91%  ±4.40%  ±14.01%
async_hooks/async-resource-vs-destroy.js n=1000000 duration=5 connections=500 path="/" asyncMethod="callbacks" type="async-resource" benchmarker="test-double-http"            ±1.38%  ±3.17%  ±10.10%
async_hooks/async-resource-vs-destroy.js n=1000000 duration=5 connections=500 path="/" asyncMethod="callbacks" type="destroy" benchmarker="test-double-http"                   ±1.70%  ±3.92%  ±12.48%
async_hooks/gc-tracking.js method="trackingDisabled" n=1000000                                                                                                                 ±3.51%  ±8.10%  ±25.78%
async_hooks/gc-tracking.js method="trackingEnabled" n=1000000                                                                                                                  ±2.67%  ±6.16%  ±19.60%
async_hooks/gc-tracking.js method="trackingEnabledWithDestroyHook" n=1000000                                                                                                   ±9.68% ±22.34%  ±71.12%
async_hooks/http-server.js duration=5 connections=50 asyncHooks="after" benchmarker="test-double-http"                                                                         ±6.39% ±14.74%  ±46.93%
async_hooks/http-server.js duration=5 connections=50 asyncHooks="all" benchmarker="test-double-http"                                                                           ±3.30%  ±7.62%  ±24.26%
async_hooks/http-server.js duration=5 connections=50 asyncHooks="before" benchmarker="test-double-http"                                                                        ±7.06% ±16.29%  ±51.86%
async_hooks/http-server.js duration=5 connections=50 asyncHooks="disabled" benchmarker="test-double-http"                                                                      ±8.57% ±19.76%  ±62.92%
async_hooks/http-server.js duration=5 connections=50 asyncHooks="init" benchmarker="test-double-http"                                                                          ±9.26% ±21.35%  ±67.98%
async_hooks/http-server.js duration=5 connections=50 asyncHooks="none" benchmarker="test-double-http"                                                                          ±7.27% ±16.76%  ±53.36%
async_hooks/http-server.js duration=5 connections=500 asyncHooks="after" benchmarker="test-double-http"                                                                        ±3.86%  ±8.89%  ±28.32%
async_hooks/http-server.js duration=5 connections=500 asyncHooks="all" benchmarker="test-double-http"                                                                          ±3.14%  ±7.24%  ±23.05%
async_hooks/http-server.js duration=5 connections=500 asyncHooks="before" benchmarker="test-double-http"                                                                      ±14.91% ±34.39% ±109.50%
async_hooks/http-server.js duration=5 connections=500 asyncHooks="disabled" benchmarker="test-double-http"                                                                     ±4.79% ±11.05%  ±35.19%
async_hooks/http-server.js duration=5 connections=500 asyncHooks="init" benchmarker="test-double-http"                                                                         ±4.25%  ±9.81%  ±31.24%
async_hooks/http-server.js duration=5 connections=500 asyncHooks="none" benchmarker="test-double-http"                                                                        ±13.74% ±31.69% ±100.90%
async_hooks/promises.js asyncHooks="disabled" n=1000000                                                                                                                        ±4.33% ±10.00%  ±31.82%
async_hooks/promises.js asyncHooks="enabled" n=1000000                                                                                                                         ±2.71%  ±6.26%  ±19.92%
async_hooks/promises.js asyncHooks="enabledWithDestroy" n=1000000                                                                                                              ±5.21% ±12.03%  ±38.29%
async_hooks/promises.js asyncHooks="enabledWithInitOnly" n=1000000                                                                                                             ±0.90%  ±2.07%   ±6.60%

Be aware that when doing many comparisons the risk of a false-positive
result increases. In this case, there are 40 comparisons, you can thus
expect the following amount of false-positive results:
  2.00 false positives, when considering a   5% risk acceptance (*, **, ***),
  0.40 false positives, when considering a   1% risk acceptance (**, ***),
  0.04 false positives, when considering a 0.1% risk acceptance (***)
